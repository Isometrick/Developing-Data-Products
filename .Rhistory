summary(glm3)
exp(glm3$coeff)
glm3 <- glm(count ~ spray-1, family = "poisson", data=data)
exp(glm3$coeff)
14.5/15.33333
?offset
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
n <- length(y)
n
knots <- seq(0, 8 * pi, length = 20);
knots
knots <- c(-5,0,5)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(plot)
library(caret)
download.package("caret")
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
?createDataPartition
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training)
head(training)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
head(training[,48:60])
head(training[,58:70])
head(training[,58:69])
tr <- training[,58:69]
head(tr)
?preProcess
pre <- preProcess(tr, method="pca")
M <- abs(cor(tr))
diag(M) <- 0
which(M > 0.8, arr.ind=T)
head(M)
pca <- predict(pre, tr)
head(pca)
pre <- preProcess(tr, method="pca", thresh = 0.8)
pca <- predict(pre, tr)
head(pca)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
tr <- training[,1] + tr
tr <- c(training[,1],tr)
head(tr)
tr <- training[, c(1, 58:69)]
head(tr)
prepca <- preProcess(tr[,-1], method="pca", thresh=0.8)
head(prepca)
?train
modelFit <- train(tr$diagnosis ~ ., method="glm", data=tr)
library(caret)
modelFit <- train(tr$diagnosis ~ ., method="glm", data=tr)
install.packages("e1071")
modelFit <- train(tr$diagnosis ~ ., method="glm", data=tr)
ts <- testing[,c(1,58:69)]
head(ts)
confusionMatrix(ts$diagnosis, predict(modelFit, ts))
modelFit <- train(tr$diagnosis ~ ., method="glm", preProcess="pca", thresh=0.8, data=tr)
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
modelFit <- train(tr$diagnosis ~ ., method="glm", preProcess="pca", trControl=ctrl, data=tr)
confusionMatrix(ts$diagnosis, predict(modelFit, ts))
library(RCurl)
library(knitr)
library(ggplot2)
library(caret)
library(rattle)
URL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
x <- getURL(URL)
training <- read.csv(file=x, header=TRUE, sep=",")
con <- url(URL)
training <- read.csv(file=con, header=TRUE, sep=",")
URL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
con <- url(URL)
testing <- read.csv(file=con, header=TRUE, sep=",")
URL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
con <- url(URL)
testing <- read.csv(file=con, header=TRUE, sep=",")
head(training)
str(training)
summary(training)
table(training[!NA])
sum(is.na(training$col))
sum(is.na(training))
class(training)
sum(is.na(training$col))
ncol(training)
sum(is.na(training[,1:160]))
na_count <-sapply(training, function(y) sum(length(which(is.na(y)))))
na_count
na_count <- data.frame(na_count)
na_count
?subset
training2 <- subset(training, subset=training[, na_count=0])
training2 <- subset(training, subset=training[, na_count==0])
training2 <- subset(training, subset=training[na_count==0])
training2 <- subset(training, subset=na_count==0)
head(training2)
training2 <- subset(training$col, subset=na_count==0)
?select
?select
training2 <- select(training, na_count==0)
library(dplyr)
training2 <- select(training, na_count==0)
training2 <- select(training, training$col[na_count==0])
training2 <- select(training, training$col[,na_count==0])
training2 <- select(training, training[,na_count==0])
?select
training2 <- select(training, filter(na_count, 0))
clasS(na_count)
class(na_count)
head(na_count)
na_count2 <- filter(na_count, na_count=0)
na_count2 <- filter(na_count, na_count==0)
sum(na_count)
sum(na_count)/19216
training2 <- select(training, na_count2)
training2 <- select(training, names(na_count2))
dim(na_count2)
training2 <- select(training, rownames(na_count2))
?rownames
rownames(na_count2)
head(na_count2)
na_count <- sapply(training, function(y) sum(length(which(is.na(y)))))
na_count2 <- filter(na_count, na_count==0)
na_count2 <- select(na_count, =0)
na_count2 <- select(na_count, sum=0)
na_count2 <- select(na_count, sum(na_count)=0)
na_count2 <- select(na_count, 0)
na_count <- sapply(training, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
na_count2 <- filter(na_count, na_count==0, drop=FALSE)
?filter
na_count <- c(rownames(na_count), na_count)
na_count
na_count <- data.frame(na_count)na_count <- sapply(training, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
head(na_count)
head(training)
na_count <- sapply(training, function(y) sum(length(which(is.na(y)))))
head(na_count)
na_count <- data.frame(na_count)
head(na_count)
na_count <- c(rownames(na_count), na_count)
head(na_count)
na_count <- sapply(training, function(y) sum(length(which(is.na(y)))))
na_count <- data.frame(na_count)
head(na_count)
na_count <- cbind(rownames(na_count), na_count)
head(na_count)
na_count2 <- filter(na_count, na_count==0)
head(na_count2)
head(training)
training2 <- subset(training, subset=c(na_count[,1]))
training2 <- select(training, subset=c(na_count[,1]))
training2 <- select(training, subset=c(na_count[,1]))
training2 <- select(training, subset=c(na_count2[,1]))
head(trainin2)
head(training2)
head(na_count2)
training2 <- subset(training, subset=c(na_count2[,1]))
colname(training)
colnames(training)
training2 <- training[, colnames(training)==na_count2[,1]]
training2 <- training[, colnames(training)==na_count2[,1]]
training2 <- training[, colSums(is.na(training)) != nrow(training)]
training2 <- training[, colSums(is.na(training)) > 0]
training2 <- training[, colSums(is.na(training)) >= 19216]
training2 <- training[, colSums(is.na(training)) >= 19217]
training2 <- training[, colSums(is.na(training)) = 0]
training2 <- training[, colSums(is.na(training)) == 0]
head(trainin2)
head(training2)
?is.blank
zero_count <- sapply(training, function(y) sum(length(which(y==0))))
zero_count
?nearZeroVar
nsv <- nearZeroVar(training, saveMetrics=TRUE)
nsv
table(nsv$nzv)
table(nsv$zeroVar)
library(devtools)
library(Rtools)
install.packages("Rtools")
devtools::install_github('rstudio/shinyapps')
install.packages("shiny")
install_github("ropensci/plotly")
library(shiny)
install.packages("UsingR")
library(UsingR)
install.packages("googleVis")
library(googleVis)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(rCharts)
install.packages("rCharts")
library(rCharts)
require(rCharts)
library(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data=subset(haireye, Sex == 'Male'))
require(rCharts)
install_github('rCharts', 'ramnathv')
require(rCharts)
require(reshape2)
library(reshape2)
library(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart', data=subset(haireye, Sex == 'Male'))
print(n1)
plot(n1)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(adData)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(adData)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
histogram(training)
head(training)
histogram(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit <- train(training$type ~ ., method="glm", preProcess="pca", data=training)
confusionMatrix(testing$type, predict(modelFit, testing))
head(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
names(training)
t <- training[,58:69]
head(t)
t <- training[,c(1,58:69)]
modelFit <- train(t$diagnosis ~ ., method="glm", preProcess="pca", data=t)
preProc <- preProcess(log10(t+1), method="pca", pcaComp=2)
head(t)
preProc <- preProcess(log10(t[,2:12]+1), method="pca", pcaComp=2)
preProc <- preProcess(t[,2:12], method="pca", pcaComp=2)
preProc
summary(preProc)
v <- predict(preProc, t)
v <- predict(preProc, t)$diagnosis
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit <- train(training$type ~ ., method="glm", preProcess="pca", data=training)
confusionMatrix(testing$type, predict(modelFit, testing))
modelFit <- train(training$diagnosis ~ ., method="glm", preProcess="pca", data=training)
confusionMatrix(testing$diagnosis, predict(modelFit, testing))
modelFit <- train(training$diagnosis ~ ., method="glm", data=training)
confusionMatrix(testing$diagnosis, predict(modelFit, testing))
head(t)
preProc <- preProcess(t[,2:12], method="pca", thresh=0.9)
preProc
preProc <- preProcess(t, method="pca", thresh=0.9)
head(adData)
rows(adData)
nrow(adData)
names(training)
preProc <- preProcess(t[,2:13], method="pca", thresh=0.9)
preProc
ncol(t)
modelFit <- train(t$diagnosis ~ ., method="glm", preProcess="pca", thres=0.8, data=t)
confusionMatrix(testing$diagnosis, predict(modelFit, testing))
modelFit <- train(t$diagnosis ~ ., method="glm", data=t)
confusionMatrix(testing$diagnosis, predict(modelFit, testing))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
library(airquality)
dTable(airquality, sPaginationType = "full_numbers")
library(help = "datasets")
library(women)
library("women")
library(datasets)
library(women)
library("women")
a<-women
a
a <- sleep
a
a <- mtcars
a
a <- cars
a
a <- euro
a
a <- eurodist
a
b <- crimtab
b<- attitude
b
b<- WWWusage
b
a
a[1,1]
class(a)
row(a)
rowname(a)
rownames(a)
?rownames
aa <- matrix(a)
aa
colnames(a)
aa <- as.matrix(a)
aa
data(eurodist)
dist <- as.matrix(eurodist)
dist
names <- colnames(dist)
names
ls
ls()
list.files()
swd("R")
setwd("R")
list.files()
setwd("Assignment9.3")
list.files()
runapp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
f
runApp()
runApp()
dist
help(eurodist)
runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='isometrick',
token='AFAAB8B63C994DB9FBAD0F0A7AE14699',
secret='jfaiRlYXMXb05jIPa4FqkJm2j/L3NPoVIFEcao0r')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
getwd
getwd()
shinyapps::deployApp("C:/Users/Kenny/Documents/R/Assignment9.3")
library(dataset)
library("dataset")
library(datasets)
shinyapps::deployApp("C:/Users/Kenny/Documents/R/Assignment9.3")
devtools::install_github('rstudio/rsconnect')
library(rsconnect)
rsconnect::setAccountInfo
rsconnect::setAccountInfo(name='isometrick',
token='AFAAB8B63C994DB9FBAD0F0A7AE14699',
secret='jfaiRlYXMXb05jIPa4FqkJm2j/L3NPoVIFEcao0r')
install.packages('shiny'))
install.packages('shiny')
install.packages("shiny")
deployApp()
dput(dist, file="dist.R")
deployApp()
write.csv(dist)
write.csv(dist, file="./dist.csv")
runApp()
runApp()
?read.csv
?write.csv
library(utils)
?read.csv
runApp()
c <- read.csv("./dist.csv")
c
runApp()
class(c)
class(aa)
runApp()
c <- as.matrix(read.csv("./dist.csv"))
?read.csv
runApp()
c <- as.matrix(read.csv("./dist.csv", header = TRUE))
load <- read.csv("./dist.csv", header = TRUE)
load
dist <- as.matrix(load)
dist
runApp()
runApp()
load <- read.csv("./dist.csv", header = TRUE, row.names = 1)
load
dist <- as.matrix(load)
dist
runApp()
runApp()
shinyapps::deployApp("C:/Users/Kenny/Documents/R/Assignment9.3")
runApp()
shinyapps::deployApp("C:/Users/Kenny/Documents/R/Assignment9.3")
